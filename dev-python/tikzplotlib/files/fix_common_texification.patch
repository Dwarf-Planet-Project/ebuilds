From e3133a8680a7bd4663fc074efd8bf3de236d9c1c Mon Sep 17 00:00:00 2001
From: Jason Gross <jgross@mit.edu>
Date: Wed, 3 Apr 2024 19:56:22 +0100
Subject: [PATCH] Inline definition of _common_texification

Work around https://github.com/matplotlib/matplotlib/commit/1936c948476b7d58d10f2c50003a0b9c38f30477
---
 src/tikzplotlib/_util.py | 35 ++++++++++++++++++++++++++++++-----
 1 file changed, 30 insertions(+), 5 deletions(-)

diff --git a/src/tikzplotlib/_util.py b/src/tikzplotlib/_util.py
index 526d8597..9428a604 100644
--- a/src/tikzplotlib/_util.py
+++ b/src/tikzplotlib/_util.py
@@ -1,8 +1,7 @@
+import functools
+import re
 import matplotlib.transforms
 import numpy as np
-from matplotlib.backends.backend_pgf import (
-    common_texification as mpl_common_texification,
-)
 
 
 def has_legend(axes):
@@ -43,7 +42,33 @@ def transform_to_data_coordinates(obj, xdata, ydata):
         return transform.transform(points).T
     return xdata, ydata
 
+_NO_ESCAPE = r"(?<!\\)(?:\\\\)*"
+_split_math = re.compile(_NO_ESCAPE + r"\$").split
+_replace_mathdefault = functools.partial(
+    # Replace \mathdefault (when not preceded by an escape) by empty string.
+    re.compile(_NO_ESCAPE + r"(\\mathdefault)").sub, "")
 
-def _common_texification(string):
+def _common_texification(text):
+    return _tex_escape(text)
+
+def _tex_escape(text):
+    r"""
+    Do some necessary and/or useful substitutions for texts to be included in
+    LaTeX documents.
+    This distinguishes text-mode and math-mode by replacing the math separator
+    ``$`` with ``\(\displaystyle %s\)``. Escaped math separators (``\$``)
+    are ignored.
+    """
+    # Sometimes, matplotlib adds the unknown command \mathdefault.
+    # Not using \mathnormal instead since this looks odd for the latex cm font.
+    text = _replace_mathdefault(text)
+    text = text.replace("\N{MINUS SIGN}", r"\ensuremath{-}")
     # Work around <https://github.com/matplotlib/matplotlib/issues/15493>
-    return mpl_common_texification(string).replace("&", "\\&")
+    text = text.replace("&", r"\&")
+    # split text into normaltext and inline math parts
+    parts = _split_math(text)
+    for i, s in enumerate(parts):
+        if i % 2:  # mathmode replacements
+            s = r"\(\displaystyle %s\)" % s
+        parts[i] = s
+    return "".join(parts)
